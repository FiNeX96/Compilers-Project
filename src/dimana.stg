module(name,stat) ::= <<
 public class <name> {
   import java.util.*
   import java.io.*

   public static void main(String[] args) {
      Scanner sc = new Scanner(System.in); /*para depois usar nos READS*/
      <stats(stat)>
      sc.close(); /*tem de fechar*/
   }
}
>>

stats(stat) ::= <<
<if(stat)><stat; separator="\n"><endif>
>>




typeValue ::= [
   "integer":"int",
   "real":"double",
   default:"null"
]



/*
list(var, type) ::= <<
   List<<type>> <var> = new ArrayList<>();
   >>
*/

/*
InsertIntoList(lista, value) ::=<<
   <lista>.add(<value>) 
>>
*/




/* unit() */

/* Dimension()*/

/* Vamos precisar */

/*
read(var, name) ::= <<
   System.out.print("Insert value into" + " '" + <name> + "': ");
   String <var> = sc.nextLine();
>>
*/

print(value) ::= "System.out.print(<value>);"
println(value) ::= "System.out.println(<value>);" 
/* write incompleto secalhar.Nos comboios tem que dar print normal ate chegar ao ultimo que da println */


decl(type,var,value) ::= "<typeValue.(type)> <var><init(value)>;"


// unit = unidade da dimensão (ex: m, kg, s, etc)
// name = nome da variável
// value = quando tem valor inicial
declare_var(unit,name) ::= "DimensionVar <name> = new DimensionVar(<unit>);"

declare_var_with_value(unit,name,value) ::= "DimensionVar <name> = new DimensionVar(<unit>,<value>);"


assign(var,value) ::= "<var> = <value>;"



binaryOperation(type,var,e1,op,e2) ::= "<decl(type,var,[e1,\" \",op,\" \",e2])>"
   



