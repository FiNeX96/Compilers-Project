module(name,stat) ::= <<
import java.util.*;
import java.io.*;

public class <name> {

   public static void main(String[] args) {
      Scanner sc = new Scanner(System.in); /*para depois usar nos READS*/
      <stats(stat)>
      sc.close(); /*tem de fechar*/
   }
}
>>

stats(stat) ::= <<
<if(stat)><stat; separator="\n"><endif>
>>



/*
list(var, type) ::= <<
   List<<type>> <var> = new ArrayList<>(); 
   
   >>
*/

/*
InsertIntoList(lista, value) ::=<<
   <lista>.add(<value>) 
>>
*/




/* unit() */

/* Dimension()*/

/* Vamos precisar */

/*

*/

print(value) ::= "System.out.print(<value>);"
println(value) ::= "System.out.println(<value>);"
scanner_next(var) ::= "<var> = sc.next();"
/* write incompleto secalhar.Nos comboios tem que dar print normal ate chegar ao ultimo que da println */

print_string(value,length) ::= "System.out.print(String.format(%<length>s, <value> ));"
println_string(value,length) ::= "System.out.println(String.format(%<length>s, <value> ));"
print_var(var,length,type) ::= "System.out.print(String.format(%<length>s, <var>.getValue_<type>() );"
println_var(var,length,type) ::= "System.out.println(String.format(%<length>s, <var>.getValue_<type>() );"

decl_with_value (type,var,value) ::= "<typeValue.(type)> <var> = <value>;"

decl(type,var) ::= "<typeValue.(type)> <var>;"

assign_scanner(var) ::= "<var> = sc.nextLine();"

typeValue ::= [
   "integer":"int",
   "real":"double",
   "string":"String",
   "double": "Double",
   "int":"Int",
   default:"null"
]

read_and_cast (type,var,dimension,temp) ::= <<
System.out.print("Insert value into variable <var> (<typeValue.(type)>)  : ");
<typeValue.(type)> <temp> = sc.next<typeValue.(typeValue.(type))>();
<var>.setValue_<typeValue.(type)>(<temp>);
>>

read(var,temp)   ::= <<
System.out.print("Insert value into variable <var> (string) : ");
<var> = sc.next();
>>



// unit = unidade da dimensão (ex: m, kg, s, etc)
// name = nome da variável
// value = quando tem valor inicial
declare_var(unit,name) ::= <<DimensionVar <name> = new DimensionVar("<unit>");>>

declare_var_with_value(unit,name,value) ::= <<
DimensionVar <name> = new DimensionVar("<unit>",<value>);
>>


assign(var,value) ::= "<var> = <value>;"



binaryOperation(type,var,e1,op,e2) ::= "<decl(type,var,[e1,\" \",op,\" \",e2])>"
   



